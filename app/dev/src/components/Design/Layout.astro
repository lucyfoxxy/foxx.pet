---
import '@Styles/tokens.css';
import '@Styles/base.css';
import '@Styles/typography.css';
import '@Styles/site.css';
import '@Styles/content.css';
import '@Styles/ui.css';
import '@Styles/media.css';
import '@Styles/table.css';
import { ASSETS } from '@Design/Assets.astro';
import { findPageByHref, getNavigationLinks, getPageContent } from '@Content/siteContent';
const goatCounterBase = import.meta.env.PUBLIC_GOATCOUNTER_URL?.replace(/\/$/, '');
const goatCounterScriptSrc = import.meta.env.PUBLIC_GOATCOUNTER_SCRIPT?.trim() || 'https://gc.zgo.at/count.js';
const enableAnalytics = import.meta.env.PROD && !!goatCounterBase;
const homePage = getPageContent('home');
const defaultMeta = {
  title: homePage.title,
  description: homePage.description,
  url: 'https://foxx.pet',
};

const props = Astro.props ?? {};
const meta = {
  ...defaultMeta,
  ...(props.meta ?? {}),
};

if (typeof props.title === 'string' && props.title.trim().length > 0) {
  meta.title = props.title.trim();
}

const { title, description, url } = meta;
const pageTitle = title;

const navLinks = getNavigationLinks();

const normalizePath = (path: string) => {
  if (!path || path === '/') return '/';
  return path.replace(/\/+$/, '') || '/';
};

const toTitleCase = (value: string) =>
  value
    .split(/[-_]/g)
    .filter(Boolean)
    .map((segment) => segment.charAt(0).toUpperCase() + segment.slice(1))
    .join(' ');

const normalizedCurrentPath = normalizePath(Astro.url.pathname);
const navLabelByPath = new Map(navLinks.map((link) => [normalizePath(link.href), link.label]));

const segments = normalizedCurrentPath === '/' ? [] : normalizedCurrentPath.slice(1).split('/');
const breadcrumbs = [] as { label: string; href: string; isCurrent: boolean }[];

const homeLink = findPageByHref('/') ?? { href: '/', navLabel: 'Home ↩', title: 'Home ↩' };
const homeLabel = (homeLink as { navLabel?: string; title?: string }).navLabel ?? homeLink.title ?? 'Home ↩';
breadcrumbs.push({
  label: homeLabel,
  href: '/',
  isCurrent: segments.length === 0,
});

const collectedSegments: string[] = [];
segments.forEach((segment, index) => {
  collectedSegments.push(segment);
  const href = normalizePath(`/${collectedSegments.join('/')}`);
  const isLast = index === segments.length - 1;
  let label = navLabelByPath.get(href) ?? toTitleCase(segment);
  if (isLast && pageTitle?.trim().length) {
    label = pageTitle.trim();
  }
  breadcrumbs.push({
    label,
    href,
    isCurrent: isLast,
  });
});

const showHomeAction = normalizedCurrentPath !== '/';
const homeAction = showHomeAction ? (homeLink as { href: string }) : undefined;
---
<html lang="en">
  <head>
    <title>{title}</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ASSETS.og.src} />
    <meta property="og:url" content={url} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={ASSETS.og.src} />    
    <link rel="icon" type="image/webp" href={ASSETS.favicon.src} />
    <link rel="preload" href={ASSETS.bg.src} as="image" type="image/webp" /> 
    <link rel="preload" href={ASSETS.logo_header.src} as="image" type="image/webp" />
    <link rel="preload" href="/fonts/FuzzyBubbles_400.woff2" as="font" type="font/woff2" crossorigin />
    <link rel="preload" href="/fonts/FuzzyBubbles_700.woff2" as="font" type="font/woff2" crossorigin />
    <link rel="preload" href="/fonts/Grandstander_italic_100-900.woff2" as="font" type="font/woff2" crossorigin />
    <link rel="preload" href="/fonts/Grandstander_normal_100-900.woff2" as="font" type="font/woff2" crossorigin />
  </head>
  <body style={`--background-image: url(${ASSETS.bg.src});`}>
   
    <header class="site-header">
      <a href="/"><img class="site-header__logo" src={ASSETS.logo_header.src} alt="foxx.pet" /></a>
      <nav class="site-header__nav">
        {navLinks
          .filter((link) => link.includeInHeader)
          .map((link) => (
            <span class="ui-chip"><a href={link.href}>{link.label}</a></span>
          ))}
      </nav>
    </header>

    <div class="container">
      <main class="panel">
        <nav class="is-breadcrumbs" aria-label="Breadcrumb">
          <ol>
            {breadcrumbs.map((crumb, index) => (
              <li>
                {crumb.isCurrent ? (
                  <span class="breadcrumbs__current" aria-current="page">{crumb.label}</span>
                ) : (
                  <a href={crumb.href}>{crumb.label}</a>
                )}
                {index < breadcrumbs.length - 1 && (
                  <span class="breadcrumbs__seperator" aria-hidden="true">›</span>
                )}
              </li>
            ))}
          </ol>
        </nav>

        <slot />

        <nav class="is-site-nav" aria-label="Page navigation">
          <span class="ui-chip ui-chip--small">
            <a href="#top">⇡ Scroll Up ⇡</a>
          </span>                  
        </nav>
      </main>
    </div>

    <footer class="site-footer">
      ©<span data-current-year></span><i>&nbsp;by&nbsp;<b>Lucy Foxx</b>&nbsp;–&nbsp;all rights reserved.</i> &nbsp;–&nbsp; <a href="/imprint">Imprint</a> &nbsp;–&nbsp; powered by &nbsp;<a href="https://astro.build">astro</a>&nbsp;
    </footer>
    <script>
      const yearEl = document.querySelector('[data-current-year]');
      if (yearEl) {
        yearEl.textContent = new Date().getFullYear().toString();
      }
    </script>
        {enableAnalytics && (
      <script data-goatcounter={`${goatCounterBase}/count`} async src={goatCounterScriptSrc}></script>
    )}
  </body>
</html>
