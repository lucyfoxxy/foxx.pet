---
import AlbumPage from '@Templates/albumPage.astro';
import Card from '@Templates/Card.astro';
import { Picture } from 'astro:assets';

interface AlbumEntry {
  slug: string;
  title: string;
  description?: string;
  href?: string;
  count?: number;
  startDate?: string;
  shareKey?: string;
  albumThumbnailAssetId?: string;
  coverUrl?: string;
}

interface CategoryInfo {
  slug: string;
  title: string;
  description?: string;
}

const { category, albums } = Astro.props as {
  category: CategoryInfo;
  albums: AlbumEntry[];
};

const dateFormatter = new Intl.DateTimeFormat('en', { month: 'short', year: 'numeric' });

const normalizedAlbums = albums.map((album) => {
  const trimmedTitle = album.title.trim();
  const parsedStartDate = album.startDate ? Date.parse(album.startDate) : Number.NaN;
  const hasValidStartDate = Number.isFinite(parsedStartDate);
  const formattedStartDate = hasValidStartDate
    ? dateFormatter.format(new Date(parsedStartDate))
    : undefined;

  const coverUrl =
    album.coverUrl ??
    (album.shareKey && album.albumThumbnailAssetId
      ? `https://img.foxx.pet/api/assets/${album.albumThumbnailAssetId}/thumbnail?key=${album.shareKey}`
      : undefined);

  return {
    ...album,
    title: trimmedTitle,
    formattedStartDate,
    coverUrl,
  };
});
---
<AlbumPage header={{ title: category.title, description: category.description, headingLevel: 'h1' }}>
  {normalizedAlbums.map(({ slug, title, href, count, formattedStartDate, coverUrl }) => (
    <a href={href ?? `/galleries/${category.slug}/${slug}`} aria-label={`Open ${title}`}>
      <Card class="card--light is-centered is-animated" headClass="card__head--column">
        <Fragment slot="head">
          <h3 class="card__title">{title}</h3>
          {(formattedStartDate || typeof count === 'number') && (
            <div class="card__badges controls controls--spread">
              {formattedStartDate ? <span class="badge badge--dark">{formattedStartDate}</span> : null}
              {typeof count === 'number' ? (
                <span class="badge badge--dark">{count > 0 ? `${count} photos` : 'No photos yet'}</span>
              ) : null}
            </div>
          )}
        </Fragment>
        <Fragment slot="body">
          <div class="media-frame" data-slug={slug}>
            {coverUrl ? (
              <Picture
                src={coverUrl}
                formats={['webp']}
                inferSize
                alt="Cover"
                fetchpriority="low"
                class="media-image"
              />
              <img class="media-image" src={coverUrl} alt="" loading="lazy" decoding="async" />
            ) : (
              <div class="media-image placeholder" aria-hidden="true"></div>
            )}
          </div>
        </Fragment>
      </Card>
    </a>
  ))}
</AlbumPage>
