---
import { ASSETS } from '@Assets/ui';
import ICONS from '@Assets/Icons.astro';
type NavLink = {
  href: string;
  label: string;
  emoji?: string;
  icon?: string;
  includeInHeader?: boolean;
  isActive?: boolean;
};
type Breadcrumb = {
  label: string;
  href: string;
  isCurrent: boolean;
};
type Props = {
  navLinks: NavLink[];
  meta?: { title?: string; description?: string; url?: string };
  breadcrumbs: Breadcrumb[];
};

const { navLinks = [], breadcrumbs = [] } = (Astro.props ?? {}) as Props;
const hasActions = Astro.slots.has('actions');
---
<header class="header" aria-label="Primary navigation">
  <a class="header__logo" aria-label="Home" href="/">
    <img src={ASSETS.logo_header.src} alt="foxx.pet" />
  </a>
  <nav class="header__nav controls controls--spread controls--nowrap">
    {navLinks
      .filter((link) => link.includeInHeader)
      .map((link) => (
        <a class="button button--small button--inset button--stretch" href={link.href} data-active={link.isActive ? 'true' : undefined}>
         <span
          class:list={[
            'header__nav-link',
            link.isActive && 'is-active'
          ]}
          data-active={link.isActive ? 'true' : undefined}
          aria-current={link.isActive ? 'page' : undefined}
        >         
            {link.icon ? (
              <>
                <span class="header__nav-symbol" aria-hidden="true">
                  <ICONS kind={link.icon} />
                </span>              
                <span class="header__nav-text">
                  {link.label}
                </span>

              </>
            ) : (
              <>
                {link.emoji ? (
                  <span class:list={['header__nav-symbol', 'header__nav-symbol--emoji']} aria-hidden="true">
                    {link.emoji}
                  </span>
                ) : null}
                <span class="header__nav-text">{link.label}</span>
              </>
            )}
         </span>  
        </a>
      ))}
  </nav>
  <div class="header__bar">
    <div class="header__crumbs" aria-label="Breadcrumb">
      <ol>
        {breadcrumbs.map((crumb, index) => (
          <li>
            {crumb.isCurrent ? (
              <span class="is-current" aria-current="page">{crumb.label}</span>
            ) : (
              <a href={crumb.href}>{crumb.label}</a>
            )}
          </li>
        ))}
      </ol>

    </div>
    {hasActions ? (
      <div class="header__actions controls controls--end">
        <slot name="actions" />
      </div>
  ) : null}
  </div>
</header>

<script>
  import { ResponsiveSiteHeader, observer } from '@Scripts/siteHeaderSticky.js';
  import { runOnReady } from '@Scripts/utils/_runOnReady.js';
  runOnReady(() => {
    const cleanup = ResponsiveSiteHeader();
    observer();
    if (typeof cleanup === 'function') {
      window.addEventListener('astro:before-swap', cleanup, { once: true });
    }
  });

</script>


