---
/**
 * Reusable tile for SubcategoryOverview lists (albums & articles).
 * Kapselt Card-Layout, Headline, Cover-Darstellung und Badges.
 */
import Card from '@Templates/Card.astro';
import { Picture } from 'astro:assets';
import type { HTMLAttributes } from 'astro/types';
import type { ImageMetadata } from 'astro:assets';

type Common = {
  href: string;
  title: string;
  description?: string;
  dataSlug?: string;
  class?: HTMLAttributes<HTMLElement>['class'];
  headClass?: HTMLAttributes<HTMLElement>['class'];
  ariaLabel?: string;
};

/** Album: Cover via URL, Badges: Startdatum + Count im Foot, H2 in Head. */
type AlbumVariant = Common & {
  variant: 'album';
  coverUrl?: string;
  /** Bereits formatiert, z.B. 'Oct 2025' */
  formattedStartDate?: string;
  /** Fotoanzahl */
  count?: number;
};

/** Article: Cover als ImageMetadata, Badge: Datum im Head, H3 in Head. */
type ArticleVariant = Common & {
  variant: 'article';
  cover: ImageMetadata;
  publishDate?: Date;
};

type Props = AlbumVariant | ArticleVariant;

const props = Astro.props as Props;

// Defaults per Variant
const defaultCardClass = 'is-centered is-animated';

const headColumnClass = 'card__head--column';

const aria = props.ariaLabel ??
  (props.variant === 'album' ? `Open ${props.title}` : `Read ${props.title}`);

// Helper fÃ¼r Badges
const albumBadge =
  typeof (props as AlbumVariant).count === 'number'
    ? (props as AlbumVariant).count! > 0
      ? `${(props as AlbumVariant).count} photos`
      : 'No photos yet'
    : undefined;

const articleFormattedDate =
  props.variant === 'article' && props.publishDate
    ? new Intl.DateTimeFormat('en', { dateStyle: 'medium' }).format(props.publishDate)
    : undefined;
const date = 
    props.variant === 'article' && articleFormattedDate ? ( articleFormattedDate ) 
    : props.variant === 'album' && props.formattedStartDate ? (props.formattedStartDate) 
    : undefined;
---

<a href={props.href} aria-label={aria}>
  <Card class={[defaultCardClass, props.class]} headClass={[headColumnClass, props.headClass]}>

    <Fragment slot="head">
        <h2 class="card__title">{props.title}</h2>
       <div class="card__badges controls controls--tight">
        { date ? (<span class="badge">{date}</span>) : null }
        { albumBadge ? (<span class="badge">{albumBadge}</span>) : null }
      </div>       
    </Fragment>

    <Fragment slot="body">
      <div class="media-wrapper">
        <div class="media-frame" data-slug={props.dataSlug}>
            {props.variant === 'article' && (props as ArticleVariant).cover ? (    
                <Picture
                    src={(props as ArticleVariant).cover}
                    formats={['avif', 'webp']}
                    alt=""
                    widths={[128,196]}
                    
                    class="media-image"
                    loading="eager"
                    decoding="async"
                />) :
             props.variant === 'album' &&  props.coverUrl ? ( 
                <img
                    src={props.coverUrl}
                    
                    alt=""
                    class="media-image"
                    loading="eager"
                    decoding="async"
                />) :( <div class="media-image placeholder" aria-hidden="true"></div> )
            }
        </div>
      </div>     
    </Fragment>
    
    <Fragment slot="foot">
        {props.description ? <p>{props.description}</p> : null}

    </Fragment>

  </Card>
</a>
