---
import { getCollection, type CollectionEntry } from 'astro:content';
import Card from '@Templates/Card.astro';
import TitleWithIcon from '@Templates/TitleWithIcon.astro';
import { getNavLabelParts, type PageContent } from '@Content/siteContent';

interface CollectionDetailConfig {
  label: string;
  field: string;
  type?: 'date' | 'text';
}

interface Props {
  content: PageContent;
}

type CollectionKey = 'stories' | 'recipes';

type CollectionEntryMap = CollectionEntry<CollectionKey>;
type DetailWithValue = CollectionDetailConfig & { value: unknown };

const { content } = Astro.props as Props;
const collectionConfig = content.collectionPage;

if (!collectionConfig) {
  throw new Error(`Page "${content.id}" does not define a collectionPage configuration.`);
}

const collectionKey = collectionConfig.collection as CollectionKey;
const rawBaseHref = collectionConfig.baseHref.trim();
const normalizedBaseHref = rawBaseHref.length === 0 ? '' : rawBaseHref.startsWith('/') ? rawBaseHref : `/${rawBaseHref}`;
const baseHref = normalizedBaseHref.replace(/\/+$/, '');
const introParagraphs = content.introParagraphs ?? (content.description ? [content.description] : []);
const { icon, emoji } = getNavLabelParts(content);
const overview = content.overview ?? {};
const facets = collectionConfig.facets ?? {};
const facetParagraphs = facets.paragraphs ?? [];
const detailsConfig = collectionConfig.item.details ?? [];
const listDetailsConfig = collectionConfig.item.listDetails ?? [];
const excerptField = collectionConfig.item.excerptField ?? 'description';

const entries = (await getCollection(collectionKey)).sort(
  (a, b) => b.data.publishDate.getTime() - a.data.publishDate.getTime(),
) as CollectionEntryMap[];

const categoryFacets = Array.from(
  new Set(entries.flatMap((entry) => entry.data.categories ?? [])),
).sort((a, b) => a.localeCompare(b));

const tagFacets = Array.from(new Set(entries.flatMap((entry) => entry.data.tags ?? []))).sort((a, b) =>
  a.localeCompare(b),
);

const formatDate = (date: Date) => new Intl.DateTimeFormat('en', { dateStyle: 'medium' }).format(date);
const hasEntries = entries.length > 0;
const facetsId = `${content.id}-facets`;
const readEntryField = (entry: CollectionEntryMap, field: string) =>
  (entry.data as Record<string, unknown>)[field];

const getDetailValue = (entry: CollectionEntryMap, detail: CollectionDetailConfig) => {
  const rawValue = (entry.data as Record<string, unknown>)[detail.field];
  if (!rawValue) {
    return undefined;
  }

  if (detail.type === 'date' && rawValue instanceof Date) {
    return formatDate(rawValue);
  }

  return rawValue;
};

const getListValues = (entry: CollectionEntryMap) =>
  listDetailsConfig
    .map((detail) => {
      const rawValue = (entry.data as Record<string, unknown>)[detail.field];
      if (!rawValue) {
        return undefined;
      }

      return { label: detail.label, value: rawValue };
    })
    .filter(Boolean) as { label: string; value: unknown }[];
---
<section class="content-section">
  <Card class="card--plain is-centered">
      <Fragment slot="head">
        <TitleWithIcon class="card__title" title={content.title} icon={icon} emoji={emoji} />
      </Fragment>

    <Fragment slot="body">
      <div class="prose">
        {introParagraphs.map((paragraph) => (
          <p>{paragraph}</p>
        ))}
      </div>
    </Fragment>
  </Card>
</section>

{hasEntries ? (
  <>
    <section class="content-section">
      <Card
        aria-labelledby={facets.heading ? facetsId : undefined}
        class:list={{
          'card--soft': facets.variant === 'soft',
        }}
        headClass="card__head--column"
      >
        {facets.heading && (
          <Fragment slot="head">
            <h2 class="card__title" id={facetsId}>
              {facets.heading}
            </h2>
          </Fragment>
        )}

        <Fragment slot="body">
          {facetParagraphs.length > 0 && (
            <div class="prose">
              {facetParagraphs.map((paragraph) => (
                <p set:html={paragraph} />
              ))}
            </div>
          )}

          <div class="prose">
            {categoryFacets.length > 0 && (
              <p>
                <strong>Categories:</strong>
                {' '}
                {categoryFacets.join(', ')}
              </p>
            )}
            {tagFacets.length > 0 && (
              <p>
                <strong>Tags:</strong>
                {' '}
                {tagFacets.join(', ')}
              </p>
            )}
            {categoryFacets.length === 0 && tagFacets.length === 0 && (
              <p set:html={facets.emptyFilters ?? 'Add categories or tags to expose richer filtering options.'} />
            )}
          </div>
        </Fragment>
      </Card>
    </section>

    <section class="content-section cols-2">
      {entries.map((entry) => {
        const entryHref = `${baseHref}/${entry.slug}/`;
        const categories = entry.data.categories ?? [];
        const tags = entry.data.tags ?? [];
        const hasBadges = categories.length > 0 || tags.length > 0;
        const excerpt = readEntryField(entry, excerptField);
        const listValues = getListValues(entry);
        const hasListValues = listValues.length > 0;
        const detailValues = detailsConfig
          .map((detail) => {
            const value = getDetailValue(entry, detail);
            return value ? { ...detail, value } : null;
          })
          .filter((detail): detail is DetailWithValue => Boolean(detail));

        return (
          <Card as="article" headClass="card__head--column">
            <Fragment slot="head">
              <h2 class="card__title">
                <a href={entryHref}>{entry.data.title}</a>
              </h2>
              {hasBadges && (
                <div class="card__badges controls controls--tight">
                  {categories.map((category) => (
                    <span class="badge badge--dark">{category}</span>
                  ))}
                  {tags.map((tag) => (
                    <span class="badge">{tag}</span>
                  ))}
                </div>
              )}
            </Fragment>

            <Fragment slot="body">
              {detailValues.length > 0 && (
                <p>
                  {detailValues.map((detail, index) => (
                    <Fragment>
                      {index > 0 && <br />}
                      <strong>{detail.label}:</strong> {String(detail.value)}
                    </Fragment>
                  ))}
                </p>
              )}
              <div class="prose">
                {typeof excerpt === 'string' && excerpt.trim().length > 0 && <p>{excerpt}</p>}
                {hasListValues && (
                  <ul>
                    {listValues.map((item) => (
                      <li>
                        <strong>{item.label}:</strong> {String(item.value)}
                      </li>
                    ))}
                  </ul>
                )}
              </div>
            </Fragment>

            <Fragment slot="foot">
              <div class="controls controls--start">
                <a class="button button--plain" href={entryHref}>
                  {collectionConfig.item.ctaLabel}
                </a>
              </div>
            </Fragment>
          </Card>
        );
      })}
    </section>
  </>
) : (
  <section class="content-section">
    <Card class="card--plain is-centered">
      <Fragment slot="head">
        <h2 class="card__title">{overview.emptyState ?? 'Stay tuned for updates'}</h2>
      </Fragment>

      <Fragment slot="body">
        <div class="prose">
          <p>{overview.cta ?? 'Add markdown entries to populate this overview automatically.'}</p>
        </div>
      </Fragment>
    </Card>
  </section>
)}
