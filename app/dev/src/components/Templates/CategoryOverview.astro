---
import BaseTemplate from '@Templates/BaseTemplate.astro';
import Card from '@Templates/Card.astro';
import TitleWithIcon from '@Templates/partials/TitleWithIcon.astro';
import { PLACEHOLDER_COVER, findCoverImage } from '@Assets/covers';
import { Picture } from 'astro:assets';
import {
  getPageContent,
  getNavLabelParts,
  getIntroParagraphs,
  getCategories,
  type PageContent,
} from '@Content/siteContent';

interface Props {
  slug: string;
}

const { slug } = Astro.props as Props;

let content = undefined as Awaited<ReturnType<typeof getPageContent>> | undefined;
let categories: ReturnType<typeof getCategories> = [];
let loadError: string | undefined;

try {
  content = await getPageContent(slug);
  categories = getCategories(content);
} catch (unknownError) {
  loadError = unknownError instanceof Error ? unknownError.message : 'Unable to load page data.';
}

const pageTitle = content?.title ?? 'Coming soon';
const meta = {
  title: pageTitle,
  description: content?.description ?? '',
};

const introParagraphs = content ? getIntroParagraphs(content) : [];
const { icon, emoji } = content ? getNavLabelParts(content) : { icon: undefined, emoji: undefined };
const placeholderCover = PLACEHOLDER_COVER;

const resolveHref = (page: PageContent | undefined, categorySlug: string, href?: string) => {
  if (href) {
    return href;
  }

  if (!page) {
    return `/${categorySlug}/`;
  }

  const normalized = page.href.replace(/\/+$/, '');
  if (!normalized) {
    return `/${categorySlug}/`;
  }

  const candidate = `${normalized}/${categorySlug}`.replace(/\/+/, '/');
  return candidate.endsWith('/') ? candidate : `${candidate}/`;
};

const normalizedCategories = !loadError && content
  ? categories.map((category) => {
      const cover = findCoverImage(category.slug, category.title) ?? placeholderCover;
      return {
        ...category,
        cover,
        href: resolveHref(content, category.slug, category.href),
      };
    })
  : [];

const hasCategories = normalizedCategories.length > 0;
---
<BaseTemplate title={pageTitle} meta={meta}>
  <section class="content-section">
    <Card class="card--plain is-centered">
      <Fragment slot="head">
        <TitleWithIcon class="card__title" title={pageTitle} icon={icon} emoji={emoji} />
      </Fragment>
      {introParagraphs.length > 0 && (
        <Fragment slot="body">
          <div class="prose">
            {introParagraphs.map((paragraph) => (
              <p>{paragraph}</p>
            ))}
          </div>
        </Fragment>
      )}
    </Card>
  </section>

  {loadError ? (
    <section class="content-section">
      <Card class="card--ghost is-centered">
        <Fragment slot="body">
          <p>{loadError}</p>
        </Fragment>
      </Card>
    </section>
  ) : hasCategories ? (
    <section class="content-section cols-3">
      {normalizedCategories.map(({ slug: categorySlug, title, description, href, cover }) => (
        <a href={href} aria-label={`Open ${title}`}>
          <Card class="card--light is-animated is-centered" headClass="card__head--column">
            <Fragment slot="head">
              <h2 class="card__title">{title}</h2>
            </Fragment>

            {description ? (
              <Fragment slot="body">
                <p>{description}</p>
              </Fragment>
            ) : null}

            <Fragment slot="foot">
              <div class="media-frame" data-slug={categorySlug}>
                <Picture
                  src={cover}
                  formats={['avif', 'webp']}
                  alt={title}
                  class="media-image"
                  fetchpriority="high"
                  decoding="async"
                />
              </div>
            </Fragment>
          </Card>
        </a>
      ))}
    </section>
  ) : (
    <section class="content-section">
      <Card class="card--ghost is-centered">
        <Fragment slot="body">
          <p>No categories to explore just yet â€” please check back soon!</p>
        </Fragment>
      </Card>
    </section>
  )}
</BaseTemplate>
