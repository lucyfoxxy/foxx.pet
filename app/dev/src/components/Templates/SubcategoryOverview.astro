---
import BaseTemplate from '@Templates/BaseTemplate.astro';
import Card from '@Templates/Card.astro';
import TitleWithIcon from '@Templates/partials/TitleWithIcon.astro';
import { Picture } from 'astro:assets';
import { PLACEHOLDER_COVER, findCoverImage } from '@Assets/covers';
import {
  findCategory,
  getIntroParagraphs,
  getNavLabelParts,
  getPageContent,
} from '@Content/siteContent';
import { getCollection } from 'astro:content';

interface Props {
  slug: string;
}

const { slug } = Astro.props as Props;
const pathSegments = Astro.url.pathname.replace(/\/+$/, '').split('/').filter(Boolean);
const areaSegment = pathSegments[0] ?? '';
const parentSlug = pathSegments[1] ?? '';

let errorMessage: string | undefined;
let area: 'album' | 'blog' | null = null;

if (!areaSegment || !parentSlug) {
  errorMessage = 'We could not resolve the requested collection.';
} else if (areaSegment === 'album' || areaSegment === 'blog') {
  area = areaSegment;
} else {
  errorMessage = `Unsupported content area "${areaSegment}" for subcategory overview.`;
}

let parentPage = undefined as Awaited<ReturnType<typeof getPageContent>> | undefined;
let subCategory = undefined as ReturnType<typeof findCategory> | undefined;

if (!errorMessage && parentSlug) {
  try {
    parentPage = await getPageContent(parentSlug);
  } catch (unknownError) {
    const message =
      unknownError instanceof Error ? unknownError.message : 'Unable to load page details.';
    errorMessage = message;
  }
}

if (!errorMessage && parentPage) {
  subCategory = findCategory(parentPage, slug);

  if (!subCategory) {
    errorMessage = 'There is nothing in this section yet — please check back later!';
  }
}

const { icon, emoji } = parentPage ? getNavLabelParts(parentPage) : { icon: undefined, emoji: undefined };
const introParagraphs = subCategory?.description
  ? [subCategory.description]
  : parentPage
  ? getIntroParagraphs(parentPage)
  : [];

const backHref = parentPage ? `${parentPage.href.replace(/\/+$/, '')}/` : undefined;
const backLabel = parentPage ? `← ${parentPage.title}` : undefined;

const placeholderCover = PLACEHOLDER_COVER;

type AlbumEntry = {
  slug: string;
  title: string;
  description: string;
  count?: number;
  formattedStartDate?: string;
  coverUrl?: string;
};

type ArticleEntry = {
  slug: string;
  title: string;
  description: string;
  publishDate?: Date;
  cover: typeof placeholderCover;
};

const albumEntries = !errorMessage && area === 'album'
  ? (await getCollection('album', ({ data }) => (data.category?.slug ?? '') === slug)).map(({ data }, index) => {
      const title = data.title ?? data.albumName ?? data.slug;
      const description = data.description ?? data.albumName ?? '';
      const startDateValue = data.startDate ? Date.parse(data.startDate) : Number.NaN;
      const hasStartDate = Number.isFinite(startDateValue);
      const formattedStartDate = hasStartDate
        ? new Intl.DateTimeFormat('en', { month: 'short', year: 'numeric' }).format(new Date(startDateValue))
        : undefined;
      const shareKey = data.shareKey ?? undefined;
      const albumThumbnailAssetId = data.albumThumbnailAssetId ?? undefined;
      const coverUrl =
        data.coverUrl ??
        (shareKey && albumThumbnailAssetId
          ? `https://img.foxx.pet/api/assets/${albumThumbnailAssetId}/thumbnail?key=${shareKey}`
          : undefined);

      return {
        slug: data.slug,
        title,
        description,
        count: data.count,
        formattedStartDate,
        coverUrl,
        _sort: hasStartDate ? startDateValue : undefined,
        _index: index,
      };
    })
      .sort((a, b) => {
        const aHas = typeof a._sort === 'number';
        const bHas = typeof b._sort === 'number';
        if (aHas && bHas) {
          return (b._sort as number) - (a._sort as number);
        }
        if (aHas) return -1;
        if (bHas) return 1;
        return a._index - b._index;
      })
      .map(({ _sort, _index, ...entry }) => entry)
  : [];

type ArticleWithHref = ArticleEntry & { href: string };

const articleEntries: ArticleWithHref[] = !errorMessage && area === 'blog'
  ? (await getCollection('blog', ({ data }) => data.primaryCategory === slug))
      .map((entry) => {
        const segments = entry.slug.split('/').filter(Boolean);
        const [sectionSegment, firstRest, ...additionalRest] = segments;
        const entrySegment =
          additionalRest.length > 0
            ? additionalRest[additionalRest.length - 1]
            : firstRest ?? entry.slug;
        const categorySegment = additionalRest.length > 0 ? firstRest ?? slug : slug;
        const href = `/${areaSegment}/${sectionSegment ?? parentSlug}/${categorySegment}/${entrySegment}/`;
        const cover =
          findCoverImage(
            entry.data.heroImage,
            entry.data.slug,
            entry.slug,
            entry.data.primaryCategory,
            entrySegment,
          ) ?? placeholderCover;

        return {
          slug: entry.slug,
          title: entry.data.title,
          description: entry.data.description ?? '',
          publishDate: entry.data.publishDate,
          cover,
          href,
        };
      })
      .sort((a, b) => {
        const aTime = a.publishDate ? a.publishDate.getTime() : 0;
        const bTime = b.publishDate ? b.publishDate.getTime() : 0;
        return bTime - aTime;
      })
  : [];

const hasEntries = !errorMessage && (area === 'album' ? albumEntries.length > 0 : articleEntries.length > 0);

const pageTitle = subCategory?.title ?? parentPage?.title ?? 'Coming soon';
const pageDescription = subCategory?.description ?? parentPage?.description ?? '';

const meta = {
  title: pageTitle,
  description: pageDescription,
};
---
<BaseTemplate title={pageTitle} meta={meta}>
  {backHref && backLabel ? (
    <Fragment slot="header__actions">
      <a class="button button--small button--round" href={backHref}>{backLabel}</a>
    </Fragment>
  ) : null}

  <section class="content-section">
    <Card class="card--plain is-centered">
      <Fragment slot="head">
        <TitleWithIcon class="card__title" title={pageTitle} icon={icon} emoji={emoji} />
      </Fragment>
      {introParagraphs.length > 0 && (
        <Fragment slot="body">
          <div class="prose">
            {introParagraphs.map((paragraph) => (
              <p>{paragraph}</p>
            ))}
          </div>
        </Fragment>
      )}
    </Card>
  </section>

  {errorMessage ? (
    <section class="content-section">
      <Card class="card--ghost is-centered">
        <Fragment slot="body">
          <p>{errorMessage}</p>
        </Fragment>
      </Card>
    </section>
  ) : hasEntries ? (
    <section class="content-section cols-3">
      {area === 'album'
        ? albumEntries.map(({ slug: albumSlug, title, description, count, formattedStartDate, coverUrl }) => {
            const itemHref = `/${areaSegment}/${parentSlug}/${slug}/${albumSlug}/`;
            const badgeLabel =
              typeof count === 'number' ? (count > 0 ? `${count} photos` : 'No photos yet') : undefined;

            return (
              <a href={itemHref} aria-label={`Open ${title}`}>
                <Card class="is-centered is-animated" headClass="card__head--column">
                  <Fragment slot="head">
                    <h2 class="card__title">{title}</h2>

                  </Fragment>
                  <Fragment slot="body">
                    <div class="media-wrapper">
                    <div class="media-frame" data-slug={albumSlug}>
                      {coverUrl ? (
                        <img class="media-image" src={coverUrl} alt="" loading="lazy" decoding="async" />
                      ) : (
                        <div class="media-image placeholder" aria-hidden="true"></div>
                      )}
                    </div>
                    </div>
                    {description ? <p>{description}</p> : null}
                  </Fragment>
                  <Fragment slot="foot">
                    {(formattedStartDate || badgeLabel) && (
                      <div class="card__badges controls controls--tight">
                        {formattedStartDate ? <span class="badge">{formattedStartDate}</span> : null}
                        {badgeLabel ? <span class="badge">{badgeLabel}</span> : null}
                      </div>
                    )}
                  </Fragment>
                </Card>
              </a>
            );
          })
        : articleEntries.map(({ slug: articleSlug, title, description, publishDate, cover, href }) => {
            const formattedDate = publishDate
              ? new Intl.DateTimeFormat('en', { dateStyle: 'medium' }).format(publishDate)
              : undefined;

            return (
              <a href={href} aria-label={`Read ${title}`}>
                <Card class="card--light is-animated" headClass="card__head--column">
                  <Fragment slot="head">
                    <h3 class="card__title">{title}</h3>
                    {formattedDate ? (
                      <div class="card__badges controls controls--tight">
                        <span class="badge badge--dark">{formattedDate}</span>
                      </div>
                    ) : null}
                  </Fragment>
                  <Fragment slot="body">
                    <div class="media-frame" data-slug={articleSlug}>
                      <Picture
                        src={cover}
                        formats={['avif', 'webp']}
                        alt=""
                        class="media-image"
                        loading="lazy"
                        decoding="async"
                      />
                    </div>
                    {description ? <p>{description}</p> : null}
                  </Fragment>
                </Card>
              </a>
            );
          })}
    </section>
  ) : (
    <section class="content-section">
      <Card class="card--ghost is-centered">
        <Fragment slot="body">
          <p>No entries yet — check back soon!</p>
        </Fragment>
      </Card>
    </section>
  )}
</BaseTemplate>
