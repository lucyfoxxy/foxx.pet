---
import BaseTemplate from '@Templates/BaseTemplate.astro';
import Card from '@Templates/Card.astro';
import HeaderActions from '@Templates/partials/HeaderActions.astro';
import ContentAlbumView from '@Templates/partials/ContentAlbumView.astro';
import ContentBlogView from '@Templates/partials/ContentBlogView.astro';
import { Picture } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import { PLACEHOLDER_COVER, findCoverImage } from '@Assets/covers';
import { findCategory, getIntroParagraphs, getPageContent } from '@Content/siteContent';
import { getCollection, getEntry } from 'astro:content';
import  ICONS  from '@Assets/Icons.astro'
interface Props {
  slug: string;
  backToParentCategory?: boolean;
}

interface AlbumViewData {
  title: string;
  description: string;
  shareKey?: string;
  albumSlug: string;
  categoryBadge?: string;
  dateBadge?: string;
  initialThumb?: {
    src?: string;
    width?: number;
    height?: number;
    alt?: string;
    full?: string;
  };
  backHref: string;
  backLabel: string;
}

interface BlogChapterView {
  id: string;
  title: string;
  summary?: string;
}

interface BlogViewData {
  title: string;
  description?: string;
  introParagraphs: string[];
  cover: ImageMetadata;
  backHref: string;
  backLabel: string;
  chapters?: BlogChapterView[];
}

const slugify = (value: string) =>
  value
    .toLowerCase()
    .normalize('NFKD')
    .replace(/[^\p{Letter}\p{Number}]+/gu, '-')
    .replace(/^-+|-+$/g, '');

const createChapterId = (title: string, slug: string | undefined, index: number) => {
  const base = slug?.trim().length ? slug.trim() : title;
  const normalized = slugify(base);
  return normalized.length > 0 ? normalized : `chapter-${index + 1}`;
};

const { slug, backToParentCategory = false } = Astro.props as Props;
const pathSegments = Astro.url.pathname.replace(/\/+$/, '').split('/').filter(Boolean);
const areaSegment = pathSegments[0] ?? '';
const categorySlug = pathSegments[1] ?? '';
const subcategorySlug = pathSegments[2];

let errorMessage: string | undefined;
let area: 'album' | 'blog' | null = null;

if (!areaSegment || !categorySlug) {
  errorMessage = 'We could not resolve this page — please try again later.';
} else if (areaSegment === 'album' || areaSegment === 'blog') {
  area = areaSegment;
} else {
  errorMessage = `Unsupported content area "${areaSegment}" for content view.`;
}

let parentPage = undefined as Awaited<ReturnType<typeof getPageContent>> | undefined;

if (!errorMessage && categorySlug) {
  try {
    parentPage = await getPageContent(categorySlug);
  } catch (unknownError) {
    errorMessage =
      unknownError instanceof Error ? unknownError.message : 'Unable to load page details.';
  }
}

const subCategory = parentPage && subcategorySlug ? findCategory(parentPage, subcategorySlug) : undefined;
const placeholderCover = PLACEHOLDER_COVER;

let albumView: AlbumViewData | undefined;
let blogView: BlogViewData | undefined;
let BlogContent: Awaited<ReturnType<(typeof getEntry)['prototype']['render']>>['Content'] | undefined;
let pageTitle = parentPage?.title ?? 'Coming soon';
let pageDescription = parentPage?.description ?? '';
let metaImage: string | undefined;

if (!errorMessage && area === 'album') {
  try {
    const [albumEntry] = await getCollection('album', ({ data }) => data.slug === slug);

    if (!albumEntry) {
      errorMessage = 'We could not find that album yet. Please check back soon!';
    } else {
      const albumData = albumEntry.data;
      const title = albumData.title ?? albumData.albumName ?? albumData.slug;
      const description = albumData.description ?? albumData.albumName ?? '';
      const shareKey = albumData.shareKey ?? undefined;
      const initialItem = Array.isArray(albumData.items)
        ? albumData.items.find((item) => item && (item.full || item.thumb))
        : undefined;
      const normalizedInitialItem = initialItem
        ? {
            src: initialItem.thumb ?? initialItem.full ?? undefined,
            width: typeof initialItem.width === 'number' ? initialItem.width : undefined,
            height: typeof initialItem.height === 'number' ? initialItem.height : undefined,
            alt: initialItem.filename ?? undefined,
            full: initialItem.full ?? undefined,
          }
        : undefined;
      const parsedStartDate = albumData.startDate ? Date.parse(albumData.startDate) : Number.NaN;
      const formattedStartDate = Number.isFinite(parsedStartDate)
        ? new Intl.DateTimeFormat('en', { month: 'long', year: 'numeric' }).format(
            new Date(parsedStartDate)
          )
        : undefined;
      const categoryTitle =
        subCategory?.title ?? albumData.category?.name ?? albumData.category?.slug ?? '';

      const backHref =
        backToParentCategory || !subcategorySlug
          ? `/${areaSegment}/${categorySlug}/`
          : `/${areaSegment}/${categorySlug}/${subcategorySlug}/`;
      const backLabel = backToParentCategory
        ? `← ${parentPage?.title ?? 'Back'}`
        : subCategory
        ? `← ${subCategory.title}`
        : `← ${parentPage?.title ?? 'Back'}`;

      albumView = {
        title,
        description,
        shareKey,
        albumSlug: albumData.slug,
        categoryBadge: categoryTitle || undefined,
        dateBadge: formattedStartDate,
        initialThumb: normalizedInitialItem,
        backHref,
        backLabel,
      };

      pageTitle = title;
      pageDescription = description;
      metaImage = albumData.coverUrl ?? normalizedInitialItem?.full ?? normalizedInitialItem?.src ?? metaImage;
    }
  } catch (unknownError) {
    errorMessage =
      unknownError instanceof Error ? unknownError.message : 'Unable to load the selected album.';
  }
} else if (!errorMessage && area === 'blog') {
  try {
    const entry = await getEntry('blog', slug);

    if (!entry) {
      errorMessage = 'We could not find that article yet. Please check back soon!';
    } else {
      const rendered = await entry.render();
      const cover =
        findCoverImage(entry.data.heroImage, entry.data.slug, slug, entry.data.primaryCategory) ?? placeholderCover;
      const backHref = `/${areaSegment}/${categorySlug}/`;
      const backLabel = parentPage ? `← ${parentPage.title}` : '← Back';
      const introParagraphs = subCategory?.description
        ? [subCategory.description]
        : parentPage
        ? getIntroParagraphs(parentPage)
        : [];
      const seenChapterIds = new Set<string>();
      const normalizedChapters: BlogChapterView[] = [];

      if (Array.isArray(entry.data.chapters)) {
        entry.data.chapters.forEach((chapter, index) => {
          const title = chapter.title.trim();

          if (!title) {
            return;
          }

          const baseId = createChapterId(title, chapter.slug, index);
          let candidateId = baseId;
          let collisionIndex = 1;

          while (seenChapterIds.has(candidateId)) {
            collisionIndex += 1;
            candidateId = `${baseId}-${collisionIndex}`;
          }

          seenChapterIds.add(candidateId);

          const summary = chapter.summary?.trim();

          normalizedChapters.push({
            id: candidateId,
            title,
            summary: summary && summary.length > 0 ? summary : undefined,
          });
        });
      }

      const articleDescription = entry.data.description?.trim();

      blogView = {
        title: entry.data.title,
        description: articleDescription && articleDescription.length > 0 ? articleDescription : undefined,
        introParagraphs,
        cover,
        backHref,
        backLabel,
        chapters: normalizedChapters.length > 0 ? normalizedChapters : undefined,
      };

      BlogContent = rendered.Content;

      pageTitle = entry.data.title;
      pageDescription = articleDescription ?? parentPage?.description ?? '';
      metaImage = cover.src;
    }
  } catch (unknownError) {
    errorMessage =
      unknownError instanceof Error ? unknownError.message : 'Unable to load this article right now.';
  }
  }

  if (errorMessage) {
    pageTitle = parentPage?.title ?? 'Content unavailable';
    pageDescription = parentPage?.description ?? '';
  }

  const headerBackHref =
  albumView?.backHref ??
  blogView?.backHref ??
  (parentPage ? `${parentPage.href.replace(/\/+$/, '')}/` : undefined);
const headerBackLabel =
  albumView?.backLabel ??
  blogView?.backLabel ??
  (parentPage ? `← ${parentPage.title}` : undefined);

const meta = {
  title: pageTitle,
  description: pageDescription,
  ...(metaImage ? { image: metaImage } : {}),
};

const blogChapters = blogView?.chapters ?? [];
const hasBlogChapters = blogChapters.length > 0;
const blogSummaryParagraphs = blogView?.introParagraphs ?? [];
const blogDescription = blogView?.description ?? '';
const hasBlogSummary = blogDescription.length > 0 || blogSummaryParagraphs.length > 0;
const firstChapter = hasBlogChapters ? blogChapters[0] : undefined;
const lastChapter = hasBlogChapters ? blogChapters[blogChapters.length - 1] : undefined;
---
<BaseTemplate title={pageTitle} meta={meta}>
  {headerBackHref && headerBackLabel ? (
    <HeaderActions slot="header__actions" href={headerBackHref} label={headerBackLabel} />
  ) : null}


  {errorMessage ? (
    <section class="content-section">
      <Card class="card--ghost is-centered">
        <Fragment slot="body">
          <p>{errorMessage}</p>
        </Fragment>
      </Card>
    </section>
  ) : albumView ? (
    <ContentAlbumView album={albumView} />
  ) : blogView ? (
    <ContentBlogView blog={blogView} BlogContent={BlogContent} />
  ) : (
    <section class="content-section">
      <Card class="card--ghost is-centered">
        <Fragment slot="body">
          <p>There is nothing to display right now — please check back soon!</p>
        </Fragment>
      </Card>
    </section>
  )}
</BaseTemplate>
