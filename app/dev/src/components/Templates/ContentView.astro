---
import BaseTemplate from '@Templates/BaseTemplate.astro';
import Card from '@Templates/Card.astro';
import { Picture } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import { COVERS } from '@Assets/covers';
import { findCategory, getIntroParagraphs, getPageContent } from '@Content/siteContent';
import { getCollection, getEntry } from 'astro:content';

interface Props {
  slug: string;
}

interface AlbumViewData {
  title: string;
  description: string;
  shareKey?: string;
  albumSlug: string;
  categoryBadge?: string;
  dateBadge?: string;
  initialThumb?: {
    src?: string;
    width?: number;
    height?: number;
    alt?: string;
    full?: string;
  };
  backHref: string;
  backLabel: string;
}

interface BlogViewData {
  title: string;
  introParagraphs: string[];
  cover: ImageMetadata;
  backHref: string;
  backLabel: string;
}

const { slug } = Astro.props as Props;
const pathSegments = Astro.url.pathname.replace(/\/+$/, '').split('/').filter(Boolean);
const areaSegment = pathSegments[0];
const categorySlug = pathSegments[1];
const subcategorySlug = pathSegments[2];

if (!areaSegment || !categorySlug) {
  throw new Error('Unable to resolve content context from the current URL.');
}

const area = areaSegment === 'album' ? 'album' : areaSegment === 'blog' ? 'blog' : null;

if (!area) {
  throw new Error(`Unsupported content area "${areaSegment}" for content view.`);
}

const parentPage = await getPageContent(categorySlug);
const subCategory = subcategorySlug ? findCategory(parentPage, subcategorySlug) : undefined;
const placeholderCover = COVERS.placeholder;

let albumView: AlbumViewData | undefined;
let blogView: BlogViewData | undefined;
let BlogContent: Awaited<ReturnType<(typeof getEntry)['prototype']['render']>>['Content'] | undefined;
let pageTitle = parentPage.title;
let pageDescription = parentPage.description ?? '';

if (area === 'album') {
  const [albumEntry] = await getCollection('album', ({ data }) => data.slug === slug);

  if (!albumEntry) {
    throw new Error(`Album "${slug}" was not found.`);
  }

  const albumData = albumEntry.data;
  const title = albumData.title ?? albumData.albumName ?? albumData.slug;
  const description = albumData.description ?? albumData.albumName ?? '';
  const shareKey = albumData.shareKey ?? undefined;
  const initialItem = Array.isArray(albumData.items)
    ? albumData.items.find((item) => item && (item.full || item.thumb))
    : undefined;
  const normalizedInitialItem = initialItem
    ? {
        src: initialItem.thumb ?? initialItem.full ?? undefined,
        width: typeof initialItem.width === 'number' ? initialItem.width : undefined,
        height: typeof initialItem.height === 'number' ? initialItem.height : undefined,
        alt: initialItem.filename ?? undefined,
        full: initialItem.full ?? undefined,
      }
    : undefined;
  const parsedStartDate = albumData.startDate ? Date.parse(albumData.startDate) : Number.NaN;
  const formattedStartDate = Number.isFinite(parsedStartDate)
    ? new Intl.DateTimeFormat('en', { month: 'long', year: 'numeric' }).format(new Date(parsedStartDate))
    : undefined;
  const categoryTitle = subCategory?.title ?? albumData.category?.name ?? albumData.category?.slug ?? '';

  const backHref = subcategorySlug
    ? `/${areaSegment}/${categorySlug}/${subcategorySlug}/`
    : `/${areaSegment}/${categorySlug}/`;
  const backLabel = subCategory ? `← ${subCategory.title}` : `← ${parentPage.title}`;

  albumView = {
    title,
    description,
    shareKey,
    albumSlug: albumData.slug,
    categoryBadge: categoryTitle || undefined,
    dateBadge: formattedStartDate,
    initialThumb: normalizedInitialItem,
    backHref,
    backLabel,
  };

  pageTitle = title;
  pageDescription = description;
} else {
  const entry = await getEntry('blog', slug);

  if (!entry) {
    throw new Error(`Blog article "${slug}" was not found.`);
  }

  const rendered = await entry.render();
  const cover = COVERS[slug] ?? placeholderCover;
  const backHref = `/${areaSegment}/${categorySlug}/`;
  const backLabel = `← ${parentPage.title}`;
  const introParagraphs = subCategory?.description ? [subCategory.description] : getIntroParagraphs(parentPage);

  blogView = {
    title: entry.data.title,
    introParagraphs,
    cover,
    backHref,
    backLabel,
  };

  BlogContent = rendered.Content;

  pageTitle = entry.data.title;
  pageDescription = entry.data.description ?? parentPage.description ?? '';
}

const meta = {
  title: pageTitle,
  description: pageDescription,
};
---
<BaseTemplate title={pageTitle} meta={meta}>
  <Fragment slot="header__actions">
    <a class="button button--small button--dark" href={albumView?.backHref ?? blogView?.backHref ?? '#'}>
      {albumView?.backLabel ?? blogView?.backLabel ?? '← Back'}
    </a>
  </Fragment>

  {albumView ? (
    <>
      <section class="content-section">
        <Card class="card--plain is-centered" headClass="card__head--column">
          <Fragment slot="head">
            <h1 class="card__title">{albumView.title}</h1>
            {(albumView.categoryBadge || albumView.dateBadge) && (
              <div class="card__badges controls controls--tight">
                {albumView.categoryBadge ? <span class="badge">{albumView.categoryBadge}</span> : null}
                {albumView.dateBadge ? <span class="badge">{albumView.dateBadge}</span> : null}
              </div>
            )}
          </Fragment>
          {albumView.description ? (
            <Fragment slot="body">
              <div class="prose">
                <p>{albumView.description}</p>
              </div>
            </Fragment>
          ) : null}
          <Fragment slot="foot">
            <div class="media-wrapper">
              <div
                class="media-frame"
                data-slug={albumView.albumSlug}
                data-autoplay="true"
                data-interval="8000"
                data-random="true"
                data-share-key={albumView.shareKey}
                role="button"
                tabindex="0"
                aria-label="Open artwork in lightbox"
              >
                <img
                  src={albumView.initialThumb?.src ?? ''}
                  width={albumView.initialThumb?.width}
                  height={albumView.initialThumb?.height}
                  alt={albumView.initialThumb?.alt ?? ''}
                  class="media-image"
                  loading="eager"
                  decoding="async"
                  data-initial-full={albumView.initialThumb?.full ?? undefined}
                />
                <button class="media-prev" aria-label="Previous" type="button">❮</button>
                <button class="media-next" aria-label="Next" type="button">❯</button>
                <button class="media-playpause" aria-label="Pause autoplay" type="button">⏸</button>
                <div class="media-progress" aria-hidden="true"></div>
              </div>
            </div>
          </Fragment>
        </Card>
      </section>

      <section class="content-section">
        <Card class="card--ghost">
          <Fragment slot="body">
            <div class="media-wrapper is-thumbs-wrap" role="list">
              <button class="media-prev is-thumbs-prev" aria-label="Previous thumbnails" type="button">❮</button>
              <div class="media-frame is-thumbs-frame" data-window="10"></div>
              <button class="media-next is-thumbs-next" aria-label="Next thumbnails" type="button">❯</button>
            </div>
          </Fragment>
        </Card>
      </section>

      <script>
        import initGalleryPage from '@Scripts/galleryViewer.js';
        import { runOnReady } from '@Scripts/utils/_runOnReady.js';

        runOnReady(initGalleryPage);
      </script>
    </>
  ) : blogView ? (
    <>
      <section class="content-section">
        <Card class="card--plain is-centered">
          <Fragment slot="head">
            <h1 class="card__title">{blogView.title}</h1>
          </Fragment>
          {blogView.introParagraphs.length > 0 && (
            <Fragment slot="body">
              <div class="prose">
                {blogView.introParagraphs.map((paragraph) => (
                  <p>{paragraph}</p>
                ))}
              </div>
            </Fragment>
          )}
        </Card>
      </section>

      <section class="content-section">
        <Card class="card--light" headClass="card__head--column">
          <Fragment slot="head">
            <Picture src={blogView.cover} formats={['avif', 'webp']} alt={blogView.title} class="media-image" />
          </Fragment>
          <Fragment slot="body">
            <article class="prose">
              {BlogContent ? <BlogContent /> : null}
            </article>
          </Fragment>
        </Card>
      </section>
    </>
  ) : null}
</BaseTemplate>
