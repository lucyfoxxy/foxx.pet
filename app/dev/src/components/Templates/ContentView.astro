---
import BaseTemplate from '@Templates/BaseTemplate.astro';
import Card from '@Templates/Card.astro';
import { Picture } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import { PLACEHOLDER_COVER, findCoverImage } from '@Assets/covers';
import { findCategory, getIntroParagraphs, getPageContent } from '@Content/siteContent';
import { getCollection, getEntry } from 'astro:content';

interface Props {
  slug: string;
  backToParentCategory?: boolean;
}

interface AlbumViewData {
  title: string;
  description: string;
  shareKey?: string;
  albumSlug: string;
  categoryBadge?: string;
  dateBadge?: string;
  initialThumb?: {
    src?: string;
    width?: number;
    height?: number;
    alt?: string;
    full?: string;
  };
  backHref: string;
  backLabel: string;
}

interface BlogViewData {
  title: string;
  introParagraphs: string[];
  cover: ImageMetadata;
  backHref: string;
  backLabel: string;
}

const { slug, backToParentCategory = false } = Astro.props as Props;
const pathSegments = Astro.url.pathname.replace(/\/+$/, '').split('/').filter(Boolean);
const areaSegment = pathSegments[0] ?? '';
const categorySlug = pathSegments[1] ?? '';
const subcategorySlug = pathSegments[2];

let errorMessage: string | undefined;
let area: 'album' | 'blog' | null = null;

if (!areaSegment || !categorySlug) {
  errorMessage = 'We could not resolve this page — please try again later.';
} else if (areaSegment === 'album' || areaSegment === 'blog') {
  area = areaSegment;
} else {
  errorMessage = `Unsupported content area "${areaSegment}" for content view.`;
}

let parentPage = undefined as Awaited<ReturnType<typeof getPageContent>> | undefined;

if (!errorMessage && categorySlug) {
  try {
    parentPage = await getPageContent(categorySlug);
  } catch (unknownError) {
    errorMessage =
      unknownError instanceof Error ? unknownError.message : 'Unable to load page details.';
  }
}

const subCategory = parentPage && subcategorySlug ? findCategory(parentPage, subcategorySlug) : undefined;
const placeholderCover = PLACEHOLDER_COVER;

let albumView: AlbumViewData | undefined;
let blogView: BlogViewData | undefined;
let BlogContent: Awaited<ReturnType<(typeof getEntry)['prototype']['render']>>['Content'] | undefined;
let pageTitle = parentPage?.title ?? 'Coming soon';
let pageDescription = parentPage?.description ?? '';
let metaImage: string | undefined;

if (!errorMessage && area === 'album') {
  try {
    const [albumEntry] = await getCollection('album', ({ data }) => data.slug === slug);

    if (!albumEntry) {
      errorMessage = 'We could not find that album yet. Please check back soon!';
    } else {
      const albumData = albumEntry.data;
      const title = albumData.title ?? albumData.albumName ?? albumData.slug;
      const description = albumData.description ?? albumData.albumName ?? '';
      const shareKey = albumData.shareKey ?? undefined;
      const initialItem = Array.isArray(albumData.items)
        ? albumData.items.find((item) => item && (item.full || item.thumb))
        : undefined;
      const normalizedInitialItem = initialItem
        ? {
            src: initialItem.thumb ?? initialItem.full ?? undefined,
            width: typeof initialItem.width === 'number' ? initialItem.width : undefined,
            height: typeof initialItem.height === 'number' ? initialItem.height : undefined,
            alt: initialItem.filename ?? undefined,
            full: initialItem.full ?? undefined,
          }
        : undefined;
      const parsedStartDate = albumData.startDate ? Date.parse(albumData.startDate) : Number.NaN;
      const formattedStartDate = Number.isFinite(parsedStartDate)
        ? new Intl.DateTimeFormat('en', { month: 'long', year: 'numeric' }).format(
            new Date(parsedStartDate)
          )
        : undefined;
      const categoryTitle =
        subCategory?.title ?? albumData.category?.name ?? albumData.category?.slug ?? '';

      const backHref =
        backToParentCategory || !subcategorySlug
          ? `/${areaSegment}/${categorySlug}/`
          : `/${areaSegment}/${categorySlug}/${subcategorySlug}/`;
      const backLabel = backToParentCategory
        ? `← ${parentPage?.title ?? 'Back'}`
        : subCategory
        ? `← ${subCategory.title}`
        : `← ${parentPage?.title ?? 'Back'}`;

      albumView = {
        title,
        description,
        shareKey,
        albumSlug: albumData.slug,
        categoryBadge: categoryTitle || undefined,
        dateBadge: formattedStartDate,
        initialThumb: normalizedInitialItem,
        backHref,
        backLabel,
      };

      pageTitle = title;
      pageDescription = description;
      metaImage = albumData.coverUrl ?? normalizedInitialItem?.full ?? normalizedInitialItem?.src ?? metaImage;
    }
  } catch (unknownError) {
    errorMessage =
      unknownError instanceof Error ? unknownError.message : 'Unable to load the selected album.';
  }
} else if (!errorMessage && area === 'blog') {
  try {
    const entry = await getEntry('blog', slug);

    if (!entry) {
      errorMessage = 'We could not find that article yet. Please check back soon!';
    } else {
      const rendered = await entry.render();
      const cover =
        findCoverImage(entry.data.heroImage, entry.data.slug, slug, entry.data.primaryCategory) ?? placeholderCover;
      const backHref = `/${areaSegment}/${categorySlug}/`;
      const backLabel = parentPage ? `← ${parentPage.title}` : '← Back';
      const introParagraphs = subCategory?.description
        ? [subCategory.description]
        : parentPage
        ? getIntroParagraphs(parentPage)
        : [];

      blogView = {
        title: entry.data.title,
        introParagraphs,
        cover,
        backHref,
        backLabel,
      };

      BlogContent = rendered.Content;

      pageTitle = entry.data.title;
      pageDescription = entry.data.description ?? parentPage?.description ?? '';
      metaImage = cover.src;
    }
  } catch (unknownError) {
    errorMessage =
      unknownError instanceof Error ? unknownError.message : 'Unable to load this article right now.';
  }
  }

  if (errorMessage) {
    pageTitle = parentPage?.title ?? 'Content unavailable';
    pageDescription = parentPage?.description ?? '';
  }

  const headerBackHref =
  albumView?.backHref ??
  blogView?.backHref ??
  (parentPage ? `${parentPage.href.replace(/\/+$/, '')}/` : undefined);
const headerBackLabel =
  albumView?.backLabel ??
  blogView?.backLabel ??
  (parentPage ? `← ${parentPage.title}` : undefined);

const meta = {
  title: pageTitle,
  description: pageDescription,
  ...(metaImage ? { image: metaImage } : {}),
};
---
<BaseTemplate title={pageTitle} meta={meta}>
  {headerBackHref && headerBackLabel ? (
    <Fragment slot="header__actions">
      <a class="button button--small button--round" href={headerBackHref}>{headerBackLabel}</a>
    </Fragment>
  ) : null}

  {errorMessage ? (
    <section class="content-section">
      <Card class="card--ghost is-centered">
        <Fragment slot="body">
          <p>{errorMessage}</p>
        </Fragment>
      </Card>
    </section>
  ) : albumView ? (
    <>
      <section class="content-section">
        <Card class="card--ghost is-centered" headClass="card__head--column">
          <Fragment slot="head">
            <h1 class="card__title">{albumView.title}</h1>
            {(albumView.categoryBadge || albumView.dateBadge) && (
              <div class="card__badges controls controls--tight">
                {albumView.categoryBadge ? <span class="badge">{albumView.categoryBadge}</span> : null}
                {albumView.dateBadge ? <span class="badge">{albumView.dateBadge}</span> : null}
              </div>
            )}
          </Fragment>
          {albumView.description ? (
            <Fragment slot="body">
              <div class="prose">
                <p>{albumView.description}</p>
              </div>
            </Fragment>
          ) : null}
          <Fragment slot="foot">
            <div class="media-wrapper">
              <div
                class="media-frame"
                data-slug={albumView.albumSlug}
                data-autoplay="true"
                data-interval="8000"
                data-random="true"
                data-share-key={albumView.shareKey}
                role="button" 
                tabindex="0" 
                aria-label="Open artwork in lightbox"
              >
          
                <img
                  src={albumView.initialThumb?.src ?? ''}
                  width={albumView.initialThumb?.width}
                  height={albumView.initialThumb?.height}
                  alt={albumView.initialThumb?.alt ?? ''}
                  class="media-image"
                  loading="eager"
                  decoding="async"
                  data-initial-full={albumView.initialThumb?.full ?? undefined}
                />


                <button class="media-prev" aria-label="Previous" type="button">❮</button>
                <button class="media-next" aria-label="Next" type="button">❯</button>
                <button class="media-playpause" aria-label="Pause autoplay" type="button">⏸</button>
                <div class="media-progress" aria-hidden="true"></div>
              </div>
            </div>
          </Fragment>
        </Card>
      </section>

      <section class="content-section">
        <Card class="card--ghost">
          <Fragment slot="body">
            <div class="media-wrapper media-wrapper--thumbs" role="list">
              <button class="media-prev is-thumbs-prev" aria-label="Previous thumbnails" type="button">❮</button>
              <div class="media-wrapper media-wrapper--frames" role="list" data-window="10">
                
              </div>
              <button class="media-next is-thumbs-next" aria-label="Next thumbnails" type="button">❯</button>
            </div>
          </Fragment>
        </Card>
      </section>

      <script>
        import initGalleryPage from '@Scripts/galleryViewer.js';
        import { runOnReady } from '@Scripts/utils/_runOnReady.js';

        runOnReady(initGalleryPage);
      </script>
    </>
  ) : blogView ? (
    <>
      <section class="content-section">
        <Card class="card--plain is-centered">
          <Fragment slot="head">
            <h1 class="card__title">{blogView.title}</h1>
          </Fragment>
          {blogView.introParagraphs.length > 0 && (
            <Fragment slot="body">
              <div class="prose">
                {blogView.introParagraphs.map((paragraph) => (
                  <p>{paragraph}</p>
                ))}
              </div>
            </Fragment>
          )}
        </Card>
      </section>

      <section class="content-section">
        <Card class="card--light" headClass="card__head--column">
          <Fragment slot="head">
            <Picture src={blogView.cover} formats={['avif', 'webp']} alt={blogView.title} class="media-image" />
          </Fragment>
          <Fragment slot="body">
            <article class="prose">
              {BlogContent ? <BlogContent /> : <p>There is no article content to show just yet.</p>}
            </article>
          </Fragment>
        </Card>
      </section>
    </>
  ) : (
    <section class="content-section">
      <Card class="card--ghost is-centered">
        <Fragment slot="body">
          <p>There is nothing to display right now — please check back soon!</p>
        </Fragment>
      </Card>
    </section>
  )}
</BaseTemplate>
