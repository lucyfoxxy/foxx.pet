---
import { getCollection, getEntry } from 'astro:content';
import Layout from '@Layout/Main.astro';
import GalleryCategoryOverviewPage from '@Pages/Gallery/CategoryOverviewPage.astro';

export async function getStaticPaths() {
  const catalog = (await getEntry('galleryCatalog', 'categories')).data;
  return catalog.categories
    .filter((c) => c.slug)
    .map((c) => ({
      params: { slug: c.slug! },
      props:  { title: c.title, description: c.description ?? '' },
    }));
}

const { slug } = Astro.params;
const { title, description } = Astro.props as { title?: string; description?: string };
const meta = {
  title: title ?? 'Gallery',
  description: description ?? '',
};

const albums = await getCollection('albumData', ({ data }) => (data.category?.slug ?? '') === slug);
const albumEntries = albums
  .map(({ data }, index) => {
    const startDateRaw = data.startDate ?? undefined;
    const parsedStartDate = startDateRaw ? Date.parse(startDateRaw) : Number.NaN;
    const hasValidStartDate = Number.isFinite(parsedStartDate);
    const normalizedStartDate = hasValidStartDate
      ? new Date(parsedStartDate).toISOString()
      : undefined;

    const shareKey = data.shareKey ?? undefined;
    const albumThumbnailAssetId = data.albumThumbnailAssetId ?? undefined;
    const coverUrl =
      shareKey && albumThumbnailAssetId
        ? `https://img.foxx.pet/api/assets/${albumThumbnailAssetId}/thumbnail?key=${shareKey}`
        : undefined;

    return {
      slug: data.slug,
      title: data.title ?? data.albumName ?? data.slug,
      description:
        data.albumName && data.albumName !== data.title
          ? data.albumName
          : undefined,
      count: data.count,
      startDate: normalizedStartDate,
      shareKey,
      albumThumbnailAssetId,
      coverUrl,
      _sortValue: hasValidStartDate ? parsedStartDate : undefined,
      _originalIndex: index,
    };
  })
  .sort((a, b) => {
    const aHasDate = typeof a._sortValue === 'number';
    const bHasDate = typeof b._sortValue === 'number';

    if (aHasDate && bHasDate) {
      // Descending by start date
      return (b._sortValue as number) - (a._sortValue as number);
    }

    if (aHasDate) return -1;
    if (bHasDate) return 1;

    return a._originalIndex - b._originalIndex;
  })
  .map(({ _sortValue, _originalIndex, ...entry }) => entry);

const category = { slug, title: meta.title, description: meta.description };
const backHref = '/galleries';
const backLabel = '‚Üê Paw Prints';
---
<Layout title={meta.title} meta={meta}>
  <Fragment slot="header__actions">
    <a class="button button--small button--dark" href={backHref}>{backLabel}</a>
  </Fragment>
  <GalleryCategoryOverviewPage category={category} albums={albumEntries} />
</Layout>
